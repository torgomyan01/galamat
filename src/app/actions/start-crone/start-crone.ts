import { PrismaClient } from "@prisma/client";
import { ActionGetProjectsProperty } from "@/app/actions/projects/get-projects-property";

const prisma = new PrismaClient();
const CONCURRENT_REQUESTS = 10; // ’Ñ’´’°’™’°’¥’°’∂’°’Ø’µ’° ’∞’°÷Ä÷Å’∏÷Ç’¥’∂’•÷Ä’´ ÷Ñ’°’∂’°’Ø

export async function StartParsing() {
  try {
    // ’ì’∏÷Ç’¨ 1. ’ç’ø’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ’¢’∏’¨’∏÷Ä ’ø’∂’•÷Ä’´ ID-’∂’•÷Ä’®
    const housesResponse = await ActionGetProjectsProperty("/house", {
      isArchive: false,
      status: ["AVAILABLE"],
    });

    const houseIds = housesResponse.data.map((item: any) => item.id);
    console.log(`’ç’ø’°÷Å’æ’•’¨ ’ß ${houseIds.length} ’ø’∏÷Ç’∂`);

    // ’ì’∏÷Ç’¨ 2. ’Ö’∏÷Ç÷Ä’°÷Ñ’°’∂’π’µ’∏÷Ç÷Ä ’ø’°’∂ ’∞’°’¥’°÷Ä ’Ω’ø’°’∂’∏÷Ç’¥ ’•’∂÷Ñ ’∞’°’ø’°’Ø’∂’•÷Ä’´ ’ø’æ’µ’°’¨’∂’•÷Ä’®
    const allPropertyIds: number[] = [];

    // ’Ñ’∑’°’Ø’∏÷Ç’¥ ’•’∂÷Ñ ’ø’∂’•÷Ä’® ’¶’∏÷Ç’£’°’∞’•’º’°’¢’°÷Ä
    await Promise.all(
      houseIds.map(async (houseId: number) => {
        try {
          const board: IBoard = await ActionGetProjectsProperty("/board", {
            houseId,
          });

          // ’Ä’°’æ’°÷Ñ’∏÷Ç’¥ ’•’∂÷Ñ ’¢’∏’¨’∏÷Ä propertyId-’∂’•÷Ä’®
          for (const floor of board.floors) {
            for (const section of floor.sections) {
              for (const cell of section.cells) {
                if (cell.propertyId) {
                  allPropertyIds.push(cell.propertyId);
                }
              }
            }
          }
        } catch (error) {
          console.error(`‚ùå ’ç’≠’°’¨ ’ø’°’∂ ID ${houseId} ’∞’°’¥’°÷Ä`, error);
        }
      }),
    );

    console.log(`‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä propertyIds: ${allPropertyIds.length}`);

    // ’ì’∏÷Ç’¨ 3. ‘π’°÷Ä’¥’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’¢’∏’¨’∏÷Ä property-’∂’•÷Ä’®
    const batchSize = 100;
    for (let i = 0; i < allPropertyIds.length; i += batchSize) {
      const batch = allPropertyIds.slice(i, i + batchSize);

      await Promise.all(
        batch.map(async (propertyId) => {
          try {
            const response = await ActionGetProjectsProperty("/property", {
              id: propertyId,
            });

            const data = response.data?.[0];
            if (!data) {
              return;
            }

            // ’ç’ø’∏÷Ç’£’∏÷Ç’¥ ’•’∂÷Ñ ’°÷Ä’§’µ’∏÷Ñ ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’´
            const existing = await prisma.property.findFirst({
              where: { property_id: propertyId },
            });

            if (existing) {
              // ‘π’°÷Ä’¥’°÷Å’∂’∏÷Ç’¥ ’•’∂÷Ñ ’£’∏’µ’∏÷Ç’©’µ’∏÷Ç’∂ ’∏÷Ç’∂’•÷Å’∏’≤’®
              await prisma.property.update({
                where: { id: existing.id, property_id: propertyId },
                data: { data },
              });
              console.log(`üîÑ ‘π’°÷Ä’¥’°÷Å’æ’°’Æ property_id: ${propertyId}`);
            } else {
              // ’ç’ø’•’≤’Æ’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∏÷Ä’®
              await prisma.property.create({
                data: {
                  property_id: propertyId,
                  data,
                },
              });
              console.log(`‚úÖ ’ç’ø’•’≤’Æ’æ’°’Æ property_id: ${propertyId}`);
            }
          } catch (e) {
            console.error(`‚ùå ’ç’≠’°’¨ property_id ${propertyId} ’∞’°’¥’°÷Ä`, e);
          }
        }),
      );
    }

    return { success: true, processed: allPropertyIds.length };
  } catch (error) {
    console.error("‘∏’∂’§’∞’°’∂’∏÷Ç÷Ä ’Ω’≠’°’¨", error);
    return { success: false, error };
  }
}
